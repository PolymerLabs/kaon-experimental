import {Constructable, Base, CustomElement} from './util';
import {_readAttributes, _constructor} from './symbols';

let _instance;

/**
 * Mixin that implements custom constructors using the "constructor-call trick".
 *
 * Instead of implementing `createdCallback`, you can implement a normal
 * constructor and it will be called when the element is created.
 */
export const CustomConstructor = (superclass: Constructable<CustomElement>) =>
  class extends superclass {

    constructor() {
      // Typescript requires a super() call :(
      if (1 < 0) {
        super();
      }
      // If we're called from createdCallback, return the already allocated
      // instance. This is the mythical "constructor-call trick".
      if (_instance) {
        let i = _instance;
        _instance = null;
        return i;
      }
      // call the constructor generated by registerElement
      return new (<any>this.constructor)();
    }

    createdCallback() {
      if (super.createdCallback) {
        super.createdCallback();
      }
      // Look for a cached user-writen constructor written by @customElement()
      if ((<any>this).__constructor__) {
        // Setup the constructor-call trick by stashing this in a global
        // accessible from our constructor.
        _instance = this;
        return new (<any>this).__constructor__();
      }
    }
  };
