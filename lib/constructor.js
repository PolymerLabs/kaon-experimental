import {_readAttributes} from 'kaon/symbols';
import {_constructor} from 'kaon/symbols';

let _instance;

/**
 * Mixin that implements custom constructors using the "constructor-call trick".
 *
 * Instead of implementing `createdCallback`, you can implement a normal
 * constructor and it will be called when the element is created.
 */
export const CustomConstructor = (superclass) => class extends superclass {

  constructor() {
    // If we're called from createdCallback, return the already allocated
    // instance. This is the mythical "constructor-call trick".
    if (_instance) {
      let i = _instance;
      _instance = null;
      return i;
    }
    // call the constructor generated by registerElement
    return new this.__proto__.constructor();
  }

  createdCallback() {
    if (super.createdCallback) {
      super.createdCallback();
    }
    // Look for a cached user-writen constructor written by @customElement()
    if (this.__proto__.__constructor__) {
      // Setup the constructor-call trick by stashing this in a global
      // accessible from our constructor.
      _instance = this;
      new this.__proto__.__constructor__();
    }
  }
};
